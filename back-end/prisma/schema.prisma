
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id String @id @unique @default(uuid())
  username String @unique
  email String @unique
  phone_number String @unique
  password String 
  verified Boolean @default(false)

  messages Message[]
  otp   OTP?
  chats_as_first_user Chat[] @relation("FirstUserChats")
  chats_as_second_user Chat[] @relation("SecondUserChats")
  
  // To track contact requests
  notification Notification[] @relation("Notification_user")
  notification_sender Notification[] @relation("Notification_sender")
  sentRequests ContactRequest[] @relation("Sender")
  receivedRequests ContactRequest[] @relation("Receiver")
}
enum messageStatus {
  RECIEVED
  READ
}
model Message {
  id Int @id  @default(autoincrement())
  chat_id String 
  sender_id String
  content String
  sent_in DateTime @default(now())
  
  status messageStatus @default(RECIEVED)
  chat Chat @relation(fields: [chat_id], references: [id]) 
  user User @relation(fields: [sender_id], references: [id])
}

model Chat {
  id String  @id @unique @default(uuid()) 
  first_user String
  second_user String
  
  firstUser    User   @relation("FirstUserChats", fields: [first_user], references: [id])
  secondUser   User   @relation("SecondUserChats", fields: [second_user], references: [id])
  
  messages     Message[]
  
  @@unique([first_user , second_user])
}

model OTP {
  userId String @id @unique 
  code String 
  expire_at DateTime
  
  user User @relation(fields: [userId], references: [id])
}

// New model for contact requests
model ContactRequest {
  id          Int       @id @default(autoincrement())
  senderId    String
  receiverId  String

  sender      User      @relation("Sender", fields: [senderId], references: [id])
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  @@unique([senderId,receiverId])
}
 model Notification {
  id      Int       @id @default(autoincrement())
  user_id String
  sender_id String
  content String
  status messageStatus @default(RECIEVED)

  user User @relation("Notification_user" , fields: [user_id] , references: [id])
  sender User @relation("Notification_sender" , fields: [sender_id] , references: [id])

 }